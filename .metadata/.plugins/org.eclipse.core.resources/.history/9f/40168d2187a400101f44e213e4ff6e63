package com.cp.workskillai.controller;

import com.cp.workskillai.dto.ApiResponse';
import com.cp.workskillai.dto.SignUpRequest;
import com.cp.workskillai.dto.SignUpResponse;
import com.cp.workskillai.service.StudentService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@CrossOrigin(origins = {"http://localhost:3000", "http://localhost:5173"}) // Add your frontend URLs
public class AuthController {

    private final StudentService studentService;

    @PostMapping("/signup")
    public ResponseEntity<ApiResponse<SignUpResponse>> registerStudent(
            @Valid @RequestBody SignUpRequest signUpRequest) {
        
        log.info("Received signup request for email: {}", signUpRequest.getEmail());
        
        try {
            SignUpResponse response = studentService.registerStudent(signUpRequest);
            
            if (response.isSuccess()) {
                log.info("Signup successful for email: {}", signUpRequest.getEmail());
                return ResponseEntity.ok(new ApiResponse<>(
                    true, 
                    response.getMessage(), 
                    response
                ));
            } else {
                log.warn("Signup failed for email: {} - {}", signUpRequest.getEmail(), response.getMessage());
                return ResponseEntity.badRequest().body(new ApiResponse<>(
                    false, 
                    response.getMessage(), 
                    null
                ));
            }
        } catch (Exception e) {
            log.error("Server error during signup for email: {}", signUpRequest.getEmail(), e);
            return ResponseEntity.internalServerError().body(new ApiResponse<>(
                false, 
                "Internal server error", 
                null
            ));
        }
    }

    @GetMapping("/verify-email")
    public ResponseEntity<ApiResponse<String>> verifyEmail(@RequestParam String token) {
        log.info("Received email verification request for token: {}", token);
        
        try {
            boolean isVerified = studentService.verifyEmail(token);
            
            if (isVerified) {
                return ResponseEntity.ok(new ApiResponse<>(
                    true, 
                    "Email verified successfully", 
                    "Email verification successful"
                ));
            } else {
                return ResponseEntity.badRequest().body(new ApiResponse<>(
                    false, 
                    "Invalid or expired verification token", 
                    null
                ));
            }
        } catch (Exception e) {
            log.error("Error during email verification for token: {}", token, e);
            return ResponseEntity.internalServerError().body(new ApiResponse<>(
                false, 
                "Internal server error during email verification", 
                null
            ));
        }
    }

    @PostMapping("/resend-verification")
    public ResponseEntity<ApiResponse<String>> resendVerification(@RequestParam String email) {
        log.info("Received resend verification request for email: {}", email);
        
        try {
            boolean isSent = studentService.resendVerificationEmail(email);
            
            if (isSent) {
                return ResponseEntity.ok(new ApiResponse<>(
                    true, 
                    "Verification email sent successfully", 
                    "Verification email sent"
                ));
            } else {
                return ResponseEntity.badRequest().body(new ApiResponse<>(
                    false, 
                    "Failed to send verification email", 
                    null
                ));
            }
        } catch (Exception e) {
            log.error("Error during resend verification for email: {}", email, e);
            return ResponseEntity.internalServerError().body(new ApiResponse<>(
                false, 
                "Internal server error", 
                null
            ));
        }
    }
}